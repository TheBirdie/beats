package aurora.simulator;

import aurora.jaxb.Controller;

public class _Controller {
	
	protected Types.Controller myType;
	protected Types.Element myTargetType;
	
	protected float dtinhours;
	protected int samplesteps;
	
	protected Object target = null;
	protected String targetid;

	/////////////////////////////////////////////////////////////////////
	// construction
	/////////////////////////////////////////////////////////////////////
	
	// copy jaxb info in constructor instead of initialize
	// because _Controller does not inherit Controller, so the data is not
	// available to this object. _Controller is not a subclass of Controller
	// because what we are really calling are the specific implementations such
	// as ControllerAlinea, and these cannot be generated by createController.
	public _Controller(Controller c,Types.Controller myType){
		this.myType = myType;
		dtinhours = c.getDt().floatValue()/3600f;
		samplesteps = Utils.round(dtinhours/Utils.simdt);
		
		if(!c.getLinkId().isEmpty()){
			myTargetType = Types.Element.LINK;
			targetid = c.getLinkId();
			target = Utils.getLinkWithId(targetid);
		}
		if(!c.getNodeId().isEmpty()){
			myTargetType = Types.Element.NODE;
			targetid = c.getNodeId();
			target = Utils.getNodeWithId(targetid);
		}
//		if(!c.getNetworkId().isEmpty()){
//			myTargetType = Types.Element.NETWORK;
//			targetid = c.getNetworkId();
//			target = Utils.theScenario.getNetwork();
//		}

	}
	
	/////////////////////////////////////////////////////////////////////
	// interface
	/////////////////////////////////////////////////////////////////////
	
	public Types.Controller getMyType() {
		return myType;
	}


	public Types.Element getMyTargetType() {
		return myTargetType;
	}

	/////////////////////////////////////////////////////////////////////
	// initialize / validate / reset / update
	/////////////////////////////////////////////////////////////////////
	
	protected void initialize() {
		// This was done in the constructor
		return;
	}
	
	protected boolean validate() {
		
		// check that the target is valid
		if(target==null){
			System.out.println("Invalid target.");
			return false;
		}
		
		// check that sample dt is an integer multiple of network dt
		if(!Utils.isintegermultipleof(dtinhours,Utils.simdt)){
			System.out.println("Controller sample time must be integer multiple of simulation time step.");
			return false;
		}
		
		return true;
	}

	protected void reset() {
	}
	
	protected void update() {
	}

}
